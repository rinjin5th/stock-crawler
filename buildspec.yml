version: 0.2

phases:

  install:
    commands:

      # debug
      - echo ${CODEBUILD_SRC_DIR}

      # AWS Codebuild Go images use /go for the $GOPATH so let's symlink our
      # application source code into that directory structure.
      - ln -s "${CODEBUILD_SRC_DIR}" "/go/src/handler"

      # Install golint
      - go get -u github.com/golang/lint/golint

      # debug
      - go version

      - go get -u github.com/golang/dep/cmd/dep

      # Install Testify to use common assertions and mocks in tests
      # - go get -u github.com/stretchr/testify

      

  pre_build:
    commands:

      # debug
      - pwd
      - echo $GOPATH
      - ls -l

      - mkdir -p /tmp/github.com/stock-crawler

      - mv * /tmp/github.com/stock-crawler
      - mv /tmp/github.com . 
      - cd ./github.com/stock-crawler

      # Make sure we're in the project directory within our GOPATH
      # - cd "/go/src/handler"

      # Fetch all dependencies
      - dep ensure

      # Ensure code passes all lint tests
      - golint -set_exit_status

      # Check for common Go application problems with 'go tool vet'
      #- go tool vet .

      # Run all tests included with our application
      # - go test .

  build:
    commands:
      
      # Build our go application
      - go build -ldflags='-w -s' -o main ./handler

      # Copy static assets to S3, and package application with AWS CloudFormation/SAM
      # - aws s3 cp --recursive public/ s3://$WEBSITE_S3_BUCKET/public/ --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
      # - sed -i -e "s|assets/|$WEBSITE_S3_PREFIX/public/assets/|g" public/index.html
      - aws cloudformation package --template template.yml --s3-bucket $S3_BUCKET --output-template ../../template-export.yml

      # debug
      - ls -l ../../
      - echo $S3_BUCKET

artifacts:
  type: zip
  files:
    - template-export.yml
